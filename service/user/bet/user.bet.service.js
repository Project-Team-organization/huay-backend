const UserBet = require("../../../models/userBetSchema.models");
const User = require("../../../models/user.model");
const LotterySet = require("../../../models/lotterySets.model");
const UserTransaction = require("../../../models/user.transection.model");
const BettingType = require("../../../models/bettingTypes.model");
const LotteryLimitedNumbers = require("../../../models/lottery_limited_numbers.model");
const LotteryType = require("../../../models/lotteryType.model");
const mongoose = require("mongoose");

exports.createUserBet = async function (user_id, lottery_set_id, bets) {
  try {
    if (!lottery_set_id || !Array.isArray(bets) || bets.length === 0) {
      throw new Error("lottery_set_id ‡πÅ‡∏•‡∏∞ bets ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á");
    }

    // ‡∏î‡∏π set ‡∏´‡∏ß‡∏¢
    const lotterySet = await validateLotterySet(lottery_set_id);
    const lotteryType = await LotteryType.findById(lotterySet.lottery_type_id);
    const bettingTypes = lotteryType.betting_types;
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î type: full
    const limitedNumbersFull = await LotteryLimitedNumbers.find({
      lottery_set_id: lotterySet._id,
      limit_type: "full",
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î type: cap
    const limitedNumbersCap = await LotteryLimitedNumbers.find({
      lottery_set_id: lotterySet._id,
      limit_type: "cap",
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ bet ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    for (const bet of bets) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö limit_type: full
      const limitedForBetTypeFull = limitedNumbersFull.filter(
        (limit) =>
          limit.betting_type_id.toString() === bet.betting_type_id.toString()
      );

      if (limitedForBetTypeFull.length > 0) {
        for (const number of bet.numbers) {
          const isLimited = limitedForBetTypeFull.some(
            (limit) => limit.number === number.number
          );
          if (isLimited) {
            throw new Error(
              `‡πÄ‡∏•‡∏Ç ${number.number} ‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ${bet.betting_type_id}`
            );
          }
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö limit_type: cap
      const limitedForBetTypeCap = limitedNumbersCap.filter(
        (limit) =>
          limit.betting_type_id.toString() === bet.betting_type_id.toString()
      );

      if (limitedForBetTypeCap.length > 0) {
        for (const number of bet.numbers) {
          const limitCap = limitedForBetTypeCap.find(
            (limit) => limit.number === number.number
          );
          if (limitCap && number.amount > limitCap.max_total_bet) {
            throw new Error(
              `‡πÄ‡∏•‡∏Ç ${number.number} ‡πÅ‡∏ó‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${limitCap.max_total_bet} ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ${bet.betting_type_id}`
            );
          }
        }
      }
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bet_amount ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ bet
    bets.forEach((bet) => {
      bet.betting_name = bettingTypes.find(
        (type) => type.code === bet.betting_type_id
      ).name;
      bet.bet_amount = bet.numbers.reduce(
        (sum, number) => sum + number.amount,
        0
      );
    });

    const bettingTypeMap = {};
    const user = await User.findById(user_id);
    const balance_before = user.credit;

    const total_bet_amount = bets.reduce((sum, bet) => sum + bet.bet_amount, 0);

    //‡πÄ‡∏ä‡πá‡∏Ñ ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏ß‡πà‡∏≤‡∏û‡∏≠‡πÑ‡∏´‡∏°?
    await validateUserCredit(user_id, total_bet_amount);
    //‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
    await deductUserCredit(user_id, total_bet_amount);

    const userAfter = await User.findById(user_id);
    const balance_after = userAfter.credit;

    const bet = await createUserBetRecord(
      user_id,
      lottery_set_id,
      bets,
      total_bet_amount
    );

    await UserTransaction.create({
      user_id,
      type: "bet",
      amount: total_bet_amount,
      balance_before,
      balance_after,
      ref_id: bet._id,
      ref_model: "UserBet",
      description: "‡πÅ‡∏ó‡∏á‡∏´‡∏ß‡∏¢",
      created_at: new Date(),
    });
    return bet;
  } catch (error) {
    console.error("‚ùå createUserBet error:", error.message);
    throw error;
  }
};

exports.getUserBetsById = async function (user_id, lottery_set_id, status) {
  try {
    if (!user_id) throw new Error("user_id ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á");

    const filter = { user_id };

    if (lottery_set_id) {
      filter.lottery_set_id = lottery_set_id;
    }
    if (status) {
      filter.status = status;
    }
    const bets = await UserBet.find(filter)
      .select("-bets -created_at -updated_at -user_id")
      .populate({
        path: "lottery_set_id",
      })
      .sort({ bet_date: -1 });
    return bets;
  } catch (error) {
    console.error("‚ùå getUserBetsById error:", error.message);
    throw error;
  }
};

exports.getAllUserBets = async function (page = 1, limit = 10) {
  try {
    const skip = (page - 1) * limit;
    const total = await UserBet.countDocuments();
    const bets = await UserBet.find()
      .populate("lottery_set_id")
      // .populate("bets.betting_option_id")
      .sort({ bet_date: -1 })
      .skip(skip)
      .limit(limit);

    return {
      bets,
      pagination: {
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit),
      },
    };
  } catch (error) {
    console.error("‚ùå getAllUserBets error:", error.message);
    throw error;
  }
};

async function validateLotterySet(lottery_set_id) {
  const lotterySet = await LotterySet.findById(lottery_set_id);
  if (!lotterySet) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∏‡∏î‡∏´‡∏ß‡∏¢‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ");
  if (lotterySet.status == "resulted" || lotterySet.status == "closed") {
    throw new Error("‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏á‡∏´‡∏ß‡∏¢");
  }
  if (lotterySet.status == "scheduled") {
    throw new Error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÅ‡∏ó‡∏á‡∏´‡∏ß‡∏¢");
  }
  return lotterySet;
}

//‡πÄ‡∏ä‡πá‡∏Ñ ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏ß‡πà‡∏≤‡∏û‡∏≠‡πÑ‡∏´‡∏°?
async function validateUserCredit(user_id, total_bet_amount) {
  const user = await User.findById(user_id);
  if (!user) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
  if (user.credit < total_bet_amount) {
    throw new Error("‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô");
  }

  return user;
}
// ‡πÄ‡∏ä‡πá‡∏Ñ ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏ß‡πà‡∏≤‡∏û‡∏≠‡πÑ‡∏´‡∏°?
async function deductUserCredit(user_id, amount) {
  await User.updateOne({ _id: user_id }, { $inc: { credit: -amount } });
}

async function createUserBetRecord(
  user_id,
  lottery_set_id,
  bets,
  total_bet_amount
) {
  const newUserBet = new UserBet({
    user_id,
    lottery_set_id,
    bets,
    total_bet_amount,
    status: "pending",
    created_at: new Date(),
    updated_at: new Date(),
    bet_date: new Date(),
  });

  await newUserBet.save();
  return newUserBet;
}

function validateAndCalculateBets(bets, validTypeIds, bettingTypeMap) {
  try {
    for (const bet of bets) {
      const typeId = String(bet.betting_type_id);
      console.log("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö betting_type_id:", typeId);

      if (!validTypeIds.includes(typeId)) {
        throw new Error(`betting_type_id ${typeId} ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏´‡∏ß‡∏¢‡∏ô‡∏µ‡πâ`);
      }
      const typeConfig = bettingTypeMap[typeId];
      if (!typeConfig) {
        throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö config ‡∏Ç‡∏≠‡∏á betting_type_id ${typeId}`);
      }
      if (!Array.isArray(bet.numbers) || bet.numbers.length === 0) {
        throw new Error("numbers ‡πÉ‡∏ô bet ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á");
      }
      const betAmount = bet.numbers.reduce((sum, n) => {
        console.log("‚û°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏Ç:", n.number, "| amount:", n.amount);

        if (typeof n.amount !== "number" || n.amount <= 0) {
          throw new Error("amount ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
        }
        if (n.amount < typeConfig.min_bet) {
          throw new Error(
            `‡πÄ‡∏•‡∏Ç ${n.number} ‡πÅ‡∏ó‡∏á ${n.amount} ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ${typeConfig.min_bet} ‡∏Ç‡∏≠‡∏á betting_type_id ${typeId}`
          );
        }
        if (n.amount > typeConfig.max_bet) {
          throw new Error(
            `‡πÄ‡∏•‡∏Ç ${n.number} ‡πÅ‡∏ó‡∏á ${n.amount} ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${typeConfig.max_bet} ‡∏Ç‡∏≠‡∏á betting_type_id ${typeId}`
          );
        }
        return sum + n.amount;
      }, 0);
      bet.bet_amount = betAmount;
      // ‡∏•‡∏ö bet.payout_amount ‡∏≠‡∏≠‡∏Å ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà property ‡∏ô‡∏µ‡πâ
    }

    console.log("üéâ validateAndCalculateBets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    return bets;
  } catch (error) {
    console.error("‚ùå validateAndCalculateBets error:", error.message);
    throw error;
  }
}

exports.cancelUserBet = async function (user_id, bet_id) {
  try {
    const userBet = await UserBet.findOne({
      _id: bet_id,
      user_id,
      status: "pending",
    });
    if (!userBet) {
      return null;
    }

    const user = await User.findById(user_id);
    const balance_before = user.credit;

    await User.updateOne(
      { _id: user_id },
      { $inc: { credit: userBet.total_bet_amount } }
    );

    const userAfter = await User.findById(user_id);
    const balance_after = userAfter.credit;

    userBet.status = "cancelled";
    userBet.updated_at = new Date();
    await userBet.save();

    await UserTransaction.create({
      user_id,
      type: "refund",
      amount: userBet.total_bet_amount,
      balance_before,
      balance_after,
      ref_id: userBet._id,
      ref_model: "UserBet",
      description: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏á‡∏´‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï",
      created_at: new Date(),
    });

    return userBet;
  } catch (error) {
    console.error("‚ùå cancelUserBet error:", error.message);
    throw error;
  }
};

exports.getUserBetByPk = async function (bet_id) {
  try {
    if (!bet_id) throw new Error("bet_id ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á");
    console.log("üîç getUserBetByPk bet_id:", bet_id);

    const bet = await UserBet.findById(bet_id)
      .select("-created_at -updated_at -user_id")
      .populate({
        path: "lottery_set_id",
        select: "name lottery_type_id",
        populate: {
          path: "lottery_type_id",
          select: "lottery_type betting_types -_id name",
        },
      });

    if (!bet) return null;

    const betObj = bet.toObject();
    const lotterySet = betObj.lottery_set_id;
    const lottery_type_name = lotterySet?.lottery_type_id?.lottery_type || null;

    // ‡πÅ‡∏°‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• betting_types ‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
    const bettingTypesMap =
      lotterySet?.lottery_type_id?.betting_types?.reduce((acc, type) => {
        acc[type.code] = type;
        return acc;
      }, {}) || {};

    // ‡πÅ‡∏°‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bets ‡∏Å‡∏±‡∏ö betting_types
    const mappedBets = betObj.bets.map((bet, index) => {
      const bettingType = bettingTypesMap[bet.betting_type_id] || {};
      return {
        ...bet,
        payout_rate:
          bettingTypesMap[bet.betting_type_id]?.payout_rate ||
          bet.betting_type_id,
        betting_type_name: bettingType.name || null,
        numbers: bet.numbers,
        bet_amount: bet.bet_amount,
      };
    });

    const responseData = {
      _id: betObj._id,
      name: lotterySet.name,
      lottery_type_name,
      bet_date: betObj.bet_date,
      total_bet_amount: betObj.total_bet_amount,
      status: betObj.status,
      bets: mappedBets,
    };
    return responseData;
  } catch (error) {
    console.error("‚ùå getUserBetByPk error:", error.message);
    throw error;
  }
};
