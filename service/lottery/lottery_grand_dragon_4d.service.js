const axios = require("axios");
const LotteryGrandDragon4d = require("../../models/lottery_grand_dragon_4d.model");

const fetchAndSaveGrandDragon4dLottery = async () => {
  try {
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡∏≠‡∏µ‡∏Å
    const today = new Date();
    const existingLottery = await LotteryGrandDragon4d.findOne({
      createdAt: {
        $gte: new Date(today.setHours(0, 0, 0, 0)),
        $lt: new Date(today.setHours(23, 59, 59, 999)),
      },
    });

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏°‡∏µ "xxxx") ‡πÉ‡∏´‡πâ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    if (existingLottery && existingLottery.results) {
      const hasIncompleteResults = Object.values(existingLottery.results).some(value => {
        if (typeof value === 'string') {
          return value.includes('xxxx') || value.includes('xxx') || value.includes('xx') || value === "" || value === null || value === undefined;
        }
        if (Array.isArray(value)) {
          return value.some(item => typeof item === 'string' && (item.includes('xxxx') || item.includes('xxx') || item.includes('xx')));
        }
        return value === null || value === undefined;
      });
      
      if (!hasIncompleteResults) {
        console.log(`‚úÖ ‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó`);
        return existingLottery;
      }
      
      console.log(`‚è≥ ‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö ‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÉ‡∏´‡∏°‡πà`);
    }

    const response = await axios.get(
      "https://test-lotto-scraper.wnimqo.easypanel.host/api/lottery/grand-dragon-4d/latest"
    );
    const { data } = response.data;

    // ‡∏ñ‡πâ‡∏≤ results ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å
    if (!data.results.first_prize) {
      throw new Error(
        `Failed to fetch and save Grand Dragon 4D lottery: ‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏ú‡∏•`
      );
    }

    const firstPrize = data.results.first_prize?.match(/\d+/)?.[0] || "";
    const secondPrize = data.results.second_prize?.match(/\d+/)?.[0] || "";
    const thirdPrize = data.results.third_prize?.match(/\d+/)?.[0] || "";

    const firstPrize3d = firstPrize.slice(-3);
    const secondPrize3d = secondPrize.slice(-3);
    const thirdPrize3d = thirdPrize.slice(-3);

    const firstPrize2d = firstPrize.slice(-2);
    const secondPrize2d = secondPrize.slice(-2);
    const thirdPrize2d = thirdPrize.slice(-2);

    const specialPrizes = data.results.special_prizes || [];
    const consolationPrizes = data.results.consolation_prizes || [];

    const lotteryData = {
      name: data.name,
      url: data.url,
      title: data.title || "‡∏´‡∏ß‡∏¢ Grand Dragon 4D",
      lotto_date: data.lotto_date,
      draw_number: data.draw_number,
      lottery_name: data.lotteryName,
      scraper: data.scraper,
      scrapedAt: data.scrapedAt,
      start_spin: new Date(),
      show_result: new Date(),
      results: {
        first_prize: data.results.first_prize,
        second_prize: data.results.second_prize,
        third_prize: data.results.third_prize,
        special_prizes: specialPrizes,
        consolation_prizes: consolationPrizes,
      },
      betting_types: [
        {
          code: "a1_4d",
          name: "4 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô",
          digit: firstPrize ? [firstPrize] : [],
        },
        {
          code: "b1_4d",
          name: "4 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á",
          digit: secondPrize ? [secondPrize] : [],
        },
        {
          code: "c1_4d",
          name: "4 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á",
          digit: thirdPrize ? [thirdPrize] : [],
        },
        {
          code: "b_3d",
          name: "3 ‡∏ï‡∏±‡∏ß‡∏ö‡∏ô",
          digit: firstPrize3d ? [firstPrize3d] : [],
        },
        {
          code: "c_3d",
          name: "3 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á",
          digit: secondPrize3d ? [secondPrize3d] : [],
        },
        {
          code: "abc_n_3d",
          name: "3 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á",
          digit: thirdPrize3d ? [thirdPrize3d] : [],
        },
        {
          code: "a_3d",
          name: "3 ‡∏ï‡∏±‡∏ß‡∏£‡∏ß‡∏°",
          digit: [firstPrize3d, secondPrize3d, thirdPrize3d].filter(digit => digit !== ""),
        },
        {
          code: "small_4d",
          name: "‡πÄ‡∏•‡πá‡∏Å",
          digit: [firstPrize, secondPrize, thirdPrize].filter(digit => digit !== ""),
        },
        {
          code: "big_4d",
          name: "‡πÉ‡∏´‡∏ç‡πà",
          digit: [firstPrize, secondPrize, thirdPrize, ...specialPrizes, ...consolationPrizes].filter(digit => digit !== ""),
        },
        {
          code: "pack_5",
          name: "5 ‡πÄ‡∏î‡πâ‡∏á",
          digit: [
            // small_4d
            firstPrize, secondPrize, thirdPrize,
            // big_4d
            firstPrize, secondPrize, thirdPrize, ...specialPrizes, ...consolationPrizes,
            // abc_n_3d
            thirdPrize3d,
            // a1_4d
            firstPrize,
            // a_3d
            firstPrize3d, secondPrize3d, thirdPrize3d,
          ].filter(digit => digit !== ""),
        },
      ],
    };

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    let lottery;
    if (existingLottery) {
      lottery = await LotteryGrandDragon4d.findByIdAndUpdate(
        existingLottery._id,
        lotteryData,
        { new: true }
      );
      console.log(`üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ`);
    } else {
      lottery = new LotteryGrandDragon4d(lotteryData);
      await lottery.save();
      console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà`);
    }
    return lottery;
  } catch (error) {
    throw new Error(`Failed to fetch and save Grand Dragon 4D lottery: ${error.message}`);
  }
};

const getAllGrandDragon4dLottery = async ({ page, limit, startDate, endDate }) => {
  try {
    const query = {};

    // Add date range filter if provided
    if (startDate || endDate) {
      query.createdAt = {};
      if (startDate) {
        query.createdAt.$gte = new Date(startDate);
      }
      if (endDate) {
        query.createdAt.$lte = new Date(endDate);
      }
    }

    // Calculate skip value for pagination
    const skip = (page - 1) * limit;

    // Get total count for pagination
    const total = await LotteryGrandDragon4d.countDocuments(query);

    // Get data with pagination
    const data = await LotteryGrandDragon4d.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    return {
      data,
      total,
    };
  } catch (error) {
    console.error("Error in getAllGrandDragon4dLottery service:", error);
    throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D");
  }
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡∏ï‡∏≤‡∏° ID
const getGrandDragon4dLotteryById = async (id) => {
  try {
    const lottery = await LotteryGrandDragon4d.findById(id);
    return lottery;
  } catch (error) {
    console.error("Error in getGrandDragon4dLotteryById service:", error);
    throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D");
  }
};

// ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡∏ï‡∏≤‡∏° ID
const deleteGrandDragon4dLottery = async (id) => {
  try {
    const lottery = await LotteryGrandDragon4d.findByIdAndDelete(id);
    return lottery;
  } catch (error) {
    console.error("Error in deleteGrandDragon4dLottery service:", error);
    throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D");
  }
};

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡∏ï‡∏≤‡∏° ID
const updateGrandDragon4dLottery = async (id, updateData) => {
  try {
    const lottery = await LotteryGrandDragon4d.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    );
    return lottery;
  } catch (error) {
    console.error("Error in updateGrandDragon4dLottery service:", error);
    throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D");
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D ‡πÉ‡∏´‡∏°‡πà
const createGrandDragon4dLottery = async (lotteryData) => {
  try {
    const lottery = new LotteryGrandDragon4d(lotteryData);
    await lottery.save();
    return lottery;
  } catch (error) {
    console.error("Error in createGrandDragon4dLottery service:", error);
    throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢ Grand Dragon 4D");
  }
};

module.exports = {
  fetchAndSaveGrandDragon4dLottery,
  getAllGrandDragon4dLottery,
  getGrandDragon4dLotteryById,
  deleteGrandDragon4dLottery,
  updateGrandDragon4dLottery,
  createGrandDragon4dLottery,
};
