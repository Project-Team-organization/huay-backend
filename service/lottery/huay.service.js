const huay = require("../../models/huay.model");
const LotterySets = require("../../models/lotterySets.model");
const UserBet = require("../../models/userBetSchema.models");
const LotteryResult = require("../../models/lottery_results.model");
const LotteryResultItem = require("../../models/lottery_result_items.model");
const LotteryWinner = require("../../models/lottery_winners.model");
const LotteryType = require("../../models/lotteryType.model");
const User = require("../../models/user.model");
const UserTransection = require("../../models/user.transection.model");
const LotteryLimitedNumbers = require("../../models/lottery_limited_numbers.model");
const { default: mongoose } = require("mongoose");
const fetch = require("node-fetch");

exports.create = async (data, lottery_set_id) => {
  try {
    const set = await LotterySets.findById(lottery_set_id);
    if (!set) {
      throw new Error("Invalid lottery_set_id : set not found.");
    }

    let result;

    if (Array.isArray(data)) {
      result = await huay.insertMany(data);
    } else {
      result = await huay.create(data);
    }

    return result;
  } catch (error) {
    console.error("Failed to insert Huay data:", error.message);
    throw new Error("Error inserting Huay data: " + error.message);
  }
};

exports.getHuay = async (lottery_set_id) => {
  try {
    if (!lottery_set_id) {
      throw new Error("lottery_set_id is required.");
    }

    const huayData = await huay.find({ lottery_set_id });
    return huayData;
  } catch (error) {
    console.error("Failed to retrieve Huay data:", error.message);
    throw new Error("Error retrieving Huay data: " + error.message);
  }
};

exports.getHuayById = async (huayId) => {
  try {
    const huayData = await huay.findById(huayId);
    if (!huayData) {
      throw new Error("Huay data not found.");
    }
    return huayData;
  } catch (error) {
    console.error("Failed to retrieve Huay data by ID:", error.message);
    throw new Error("Error retrieving Huay data by ID: " + error.message);
  }
};

exports.updateHuay = async (huayId, data) => {
  try {
    const updatedHuay = await huay.findByIdAndUpdate(huayId, data, {
      new: true,
    });
    return updatedHuay;
  } catch (error) {
    console.error("Failed to update Huay data:", error.message);
    throw new Error("Error updating Huay data: " + error.message);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏ß‡∏¢
exports.printLotteryResults = async function () {
  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    const response = await fetch("https://lotto.api.rayriffy.com/latest");
    const lotteryData = await response.json();

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1
    const getFirstPrize = () => {
      const first = lotteryData.response.prizes.find(
        (p) => p.id === "prizeFirst"
      );
      return first.number[0]; // ‡πÄ‡∏ä‡πà‡∏ô "123456"
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß
    const getFrontThreeDigits = () => {
      const front = lotteryData.response.runningNumbers.find(
        (r) => r.id === "runningNumberFrontThree"
      );
      return front.number; // ‡πÄ‡∏ä‡πà‡∏ô ["123", "456"]
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß
    const getBackThreeDigits = () => {
      const back = lotteryData.response.runningNumbers.find(
        (r) => r.id === "runningNumberBackThree"
      );
      return back.number; // ‡πÄ‡∏ä‡πà‡∏ô ["789", "012"]
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß
    const getBackTwoDigits = () => {
      const back = lotteryData.response.runningNumbers.find(
        (r) => r.id === "runningNumberBackTwo"
      );
      return back.number[0]; // ‡πÄ‡∏ä‡πà‡∏ô "56"
    };

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    const prizeResults = {
      firstPrize: getFirstPrize(),
      frontThreeDigits: getFrontThreeDigits(),
      backThreeDigits: getBackThreeDigits(),
      backTwoDigits: getBackTwoDigits(),
      date: lotteryData.response.date,
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
    console.log("\nüéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏ß‡∏¢ üéØ");
    console.log(`üìÖ ‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${prizeResults.date}\n`);
    console.log("üèÜ ‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à:");
    console.log(`‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: ${prizeResults.firstPrize}`);
    console.log(`‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß: ${prizeResults.frontThreeDigits.join(", ")}`);
    console.log(`‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß: ${prizeResults.backThreeDigits.join(", ")}`);
    console.log(`‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß: ${prizeResults.backTwoDigits}\n`);

    return prizeResults;
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢:", error.message);
    throw error;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
const createLotteryResultItems = async (
  lottery_type,
  huayResults,
  lotteryResult
) => {
  const resultItems = [];

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ï‡∏≤‡∏° betting_types ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
  for (const betType of lottery_type.betting_types) {
    let numbers = [];

    switch (betType.code) {
      case "6d_top":
        numbers = [huayResults.firstPrize];
        break;
      case "5d_top":
        numbers = [huayResults.firstPrize.slice(-5)];
        break;
      case "4d_top":
        numbers = [huayResults.firstPrize.slice(-4)];
        break;
      case "3top":
        numbers = [huayResults.firstPrize.slice(-3)];
        break;
      case "3toad":
        numbers = [huayResults.firstPrize.slice(-3)];
        break;
      case "3front":
        numbers = huayResults.frontThreeDigits;
        break;
      case "3back":
        numbers = huayResults.backThreeDigits;
        break;
      case "2top":
        numbers = [huayResults.firstPrize.slice(-2)];
        break;
      case "2bottom":
        numbers = [huayResults.backTwoDigits];
        break;
      case "1top":
        numbers = huayResults.firstPrize.slice(-3).split("");
        break;
      case "1bottom":
        numbers = huayResults.backTwoDigits.split("");
        break;
    }

    if (numbers.length > 0) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å LotteryResultItem
      const resultItem = await LotteryResultItem.create({
        lottery_result_id: lotteryResult._id,
        betting_type_id: betType.code,
        name: betType.name,
        reward: betType.payout_rate,
        numbers: numbers,
        winner_count: 0,
      });
      resultItems.push(resultItem);
    }
  }

  return resultItems;
};

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏á‡∏´‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
exports.evaluateUserBetsByLotterySet = async function (
  lottery_set_id,
  createdBy
) {
  try {
    if (!lottery_set_id) {
      throw new Error("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ lottery_set_id");
    }

    // 1. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ
    const huayResults = await this.printLotteryResults();
    const lottery_set = await LotterySets.findById(lottery_set_id);
    if (!lottery_set) {
      throw new Error("lottery_set_id is required.");
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ lottery_results ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let lotteryResult = await LotteryResult.findOne({ lottery_set_id });
    let resultItems = [];

    if (!lotteryResult) {
      console.log(lottery_set.lottery_type_id);
      const lottery_type = await LotteryType.findById(
        lottery_set.lottery_type_id
      );
      if (!lottery_type || lottery_type == null) {
        throw new Error("lottery_type_id is required.");
      }

      // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏´‡∏ß‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
      lotteryResult = await LotteryResult.create({
        lottery_set_id,
        draw_date: new Date(),
        status: "published",
        createdBy,
      });

      // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
      const huay_results = await huay.find({ lottery_set_id: lottery_set_id });
      if (huay_results && huay_results.length > 0) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á LotteryResultItems ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á huay
        for (const huayItem of huay_results) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å LotteryResultItem
          const resultItem = await LotteryResultItem.create({
            lottery_result_id: lotteryResult._id,
            betting_type_id: huayItem.code, // ‡πÉ‡∏ä‡πâ code ‡∏à‡∏≤‡∏Å huay ‡πÄ‡∏õ‡πá‡∏ô betting_type_id
            name: huayItem.huay_name,
            reward:
              lottery_type.betting_types.find((bt) => bt.code === huayItem.code)
                ?.payout_rate || 0,
            numbers: huayItem.huay_number,
            winner_count: 0,
          });
          resultItems.push(resultItem);
        }
      } else {
        resultItems = await createLotteryResultItems(
          lottery_type,
          huayResults,
          lotteryResult
        );
      }
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ lottery_results ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á resultItems ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      resultItems = await LotteryResultItem.find({
        lottery_result_id: lotteryResult._id,
      });
    }

    console.log(
      "üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß:",
      resultItems.length,
      "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
    );

    // 4. ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    const pendingBets = await UserBet.find({
      lottery_set_id,
      status: "pending",
    });

    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
    const winners = [];
    for (const userBet of pendingBets) {
      console.log(`üë§ ‡∏ï‡∏£‡∏ß‡∏à user: ${userBet.user_id}`);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const user = await User.findById(userBet.user_id);
      if (!user) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userBet.user_id}`);
        continue;
      }

      let totalWinAmount = 0;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏á
      for (const bet of userBet.bets) {
        // ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏á
        const matchedResult = resultItems.find(
          (item) => item.betting_type_id === bet.betting_type_id
        );

        if (matchedResult) {
          console.log(`üé≤ ‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${matchedResult.name}`);

          // ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏á
          for (const numObj of bet.numbers) {
            const userNumber = numObj.number;
            const amount = numObj.amount;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô
            const limitedNumber = await LotteryLimitedNumbers.find({
              lottery_set_id: lottery_set_id,
              betting_type_id: matchedResult.betting_type_id,
              number: userNumber,
            });
            if (limitedNumber && limitedNumber.length > 0) {
              if (limitedNumber[0].limit_type === "full") {
                console.log(`‚õî ‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó full: ${userNumber}`);
                continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              }

              if (
                limitedNumber[0].limit_type === "cap" &&
                amount > limitedNumber[0].max_total_bet
              ) {
                console.log(`‚ö†Ô∏è ‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó cap: ${userNumber} ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î`);
                continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              }
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏´‡∏°
            const isWin = matchedResult.numbers.includes(userNumber);
            console.log(
              `‚û°Ô∏è ‡πÅ‡∏ó‡∏á‡πÄ‡∏•‡∏Ç: ${userNumber}, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${amount} | ${
                isWin ? "‚úÖ ‡∏ñ‡∏π‡∏Å" : "‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å"
              }`
            );

            if (isWin) {
              // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏á * ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢
              let payout_rate = matchedResult.reward;
              let payout_rate_partial = 0;
              let payout_type = "";
              let payout = 0;
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó partial ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ payout_rate ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô
              const lotterylimit_partial = await LotteryLimitedNumbers.find({
                lottery_set_id: lottery_set_id,
                betting_type_id: matchedResult.betting_type_id,
                number: userNumber,
                limit_type: "partial",
              });
              if (lotterylimit_partial && lotterylimit_partial.length > 0) {
                payout_rate_partial = lotterylimit_partial[0].payout_rate;
                payout_type = lotterylimit_partial[0].payout_type;
                console.log(
                  `üí° ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô: ${payout_rate}  ${payout_type}`
                );
              }
              if (payout_type === "rate") {
                payout = amount * payout_rate_partial;
              } else if (payout_type == "percentage") {
                payout = amount * payout_rate * (payout_rate_partial / 100);
                console.log(amount * payout_rate);
                console.log(payout_rate_partial / 100);
                console.log(`üí° ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô: ${payout}`);
              } else {
                payout = amount * payout_rate;
              }
              totalWinAmount += payout;

              // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
              const winner = await LotteryWinner.create({
                user_id: userBet.user_id,
                bet_id: userBet._id,
                lottery_result_id: lotteryResult._id,
                betting_type_id: matchedResult.betting_type_id,
                lottery_set_id: lottery_set_id,
                matched_numbers: [userNumber],
                number: userNumber, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
                payout: payout,
                status: "paid",
              });
              winners.push(winner);

              // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô LotteryResultItem
              matchedResult.winner_count += 1;
              await LotteryResultItem.findByIdAndUpdate(matchedResult._id, {
                winner_count: matchedResult.winner_count,
              });
            }
          }
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      if (totalWinAmount > 0) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        user.credit += totalWinAmount;
        await user.save();

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
        await UserTransection.create({
          user_id: user._id,
          type: "payout",
          amount: totalWinAmount,
          detail: `‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏ß‡∏¢ ‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${huayResults.date}`,
          status: "success",
          balance_before: user.credit - totalWinAmount,
          balance_after: user.credit,
          ref_id: userBet._id,
          ref_model: "UserBet",
          description: `‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏ß‡∏¢ ‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${huayResults.date}`,
        });

        console.log(
          `üí∞ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ${totalWinAmount} ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ ${user.username}`
        );
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
      userBet.status = winners.some(
        (w) => w.bet_id.toString() === userBet._id.toString()
      )
        ? "won"
        : "lost";


      userBet.bets.forEach(bet => {
        bet.numbers.forEach(num => {
          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const isWinner = winners.some(w => 
            w.bet_id.toString() === userBet._id.toString() && 
            w.matched_numbers.includes(num.number) && 
            w.betting_type_id === bet.betting_type_id
          );
          num.is_won = isWinner;
        });
      });
      userBet.updated_at = new Date();
      await userBet.save();

      console.log(`üéØ ‡∏ú‡∏•: ${userBet.status.toUpperCase()}`);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ lottery_set ‡πÄ‡∏õ‡πá‡∏ô resulted
    await LotterySets.findByIdAndUpdate(lottery_set_id, { status: "resulted" });

    console.log(`\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${pendingBets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    return {
      lottery_result: lotteryResult,
      result_items: resultItems,
      winners: winners,
    };
  } catch (error) {
    console.error("‚ùå evaluateUserBetsByLotterySet error:", error.message);
    throw error;
  }
};

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getLotteryWinners = async (lottery_result_id) => {
  return await LotteryWinner.find({ lottery_result_id })
    .populate("user_id", "username")
    .populate("betting_type_id", "name")
    .populate("lottery_result_id", "draw_date");
};

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î
exports.getLotteryResultItems = async (lottery_result_id) => {
  return await LotteryResultItem.find({ lottery_result_id }).populate(
    "betting_type_id",
    "name"
  );
};

exports.getAllHuay = async (page = 1, limit = 10) => {
  try {
    const skip = (page - 1) * limit;
    const total = await huay.countDocuments();
    const huays = await huay.find().skip(skip).limit(limit);
    return {
      huays,
      pagination: {
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit),
      },
    };
  } catch (error) {
    console.error("Failed to retrieve all Huay data:", error.message);
    throw new Error("Error retrieving all Huay data: " + error.message);
  }
};
